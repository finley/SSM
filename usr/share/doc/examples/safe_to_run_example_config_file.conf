########################################################################
#
# Copyright (C) 2006-2017 Brian Elliott Finley <brian@thefinleys.com>
#
#   Simple State Manager
#
#   Simple State Manager is a tool that can be used to ensure consistent
#   state across a large number of machines.  
#
#   Simple State Manager includes the following features, plus others:
#
#       Designed to be "safe" above all, and not do anything
#       "automatically", but to ask for your permission in all cases
#       (unless you tell it not to with "--yes").
#
#       Designed to use a simple, easy to read configuration file.
#
#       State definition config files support "includes" (called
#       bundles).
#
#       State definition files may be located on a managed node's local
#       file system, a shared file system, or on a central web or ftp
#       server.
#
#       Supports priorities (this version of file X has priority over
#       that version of file X)
#
#       Handles files and packages
#
#       Handles the following file types (and others):
#           - regular
#           - directory
#           - softlink
#           - hardlink
#           - block
#           - character
#           - fifo
#
#   This file is a heavily commented example state definition config
#   file.
#
#   It is intended to be used as a canonical reference of all possible
#   Simple State Manager definition options.  It should contain at least
#   one of each type of configuration entry.
#
#   It is also designed to be used (unmodified) as a safe demonstration
#   of Simple State Manager file based functionality.
#
#   Give it a try with the safe example config file!
#
#   This safe config file does no package operations, and only
#   references demo files that live in /tmp/.
#
#   ssm --summary --config /usr/share/doc/simple-state-manager/examples/safe_to_run_example_config_file.conf
#
#       Just show a summary of the current state of things.  This is a
#       safe and read only operation.
#
#   ssm --sync    --config /usr/share/doc/simple-state-manager/examples/safe_to_run_example_config_file.conf
#
#       One by one, shows each item that is "out of sync", and asks you
#       to choose to do nothing (the default), or one of a handful of
#       other options.  Again, this is safe, and won't even make any
#       changes to the demo files without your permission.
#
#
########################################################################


[global]
########################################################################
#
#   BEGIN Package management related options
#
########################################################################
#
#
#-----------------------------------------------------------------------
#   Package Manager
#-----------------------------------------------------------------------
#
#       apt-get      
#           Appropriate for Ubuntu, Debian, and Debian based systems.
#           dpkg and aptitude may be used as synonyms for apt-get.
#
#       yum
#           Appropriate for RHEL, CentOS, Fedora, Scientific Linux, and
#           other RPM+YUM based systems.
#    
#       zypper
#           Appropriate for SLE, OpenSUSE, and any zypper based system.
#    
#       none
#           Use type 'none' for AIX and other non-Linux, Unix-like
#           systems, not-yet supported package managers, or if you
#           simply don't want to incorporate package management.
#
#       Default: none
# 
#pkg_manager = none
#
#
#-----------------------------------------------------------------------
#   Package Manager Autoremove
#-----------------------------------------------------------------------
#
#       yes
#           If your package manager supports an autoremove option, ssm
#           will present you with an option to remove packages
#           identified for autoremoval.
#
#           If you've ever had the /boot file system fill up with old
#           kernel files, you want to enable this option.  For details
#           on the behavior to expect see the man page for your package
#           manager.
#
#       no
#           Don't autoremove packages.
#    
#       Default: no  (but 'yes' is highly recommended)
# 
#pkg_manager_autoremove = no
#
#
#-----------------------------------------------------------------------
#   Package Repo Updates
#-----------------------------------------------------------------------
#
#       auto
#           Ask the package manager to update it's package repo info
#           cache, but only if the last update happened over
#           $pkg_repo_update_window hours ago.
#
#       yes
#           Ask the package manager to update it's package repo info
#           cache, every time.
#
#       no
#           Never ask the package manager to update it's package repo
#           info cache.
#
#       Default: auto
# 
#pkg_repo_update = auto
#
#
#-----------------------------------------------------------------------
#   Package Repo Update Window
#-----------------------------------------------------------------------
#
#   When 'pkg_repo_update' is set to 'auto' (see above), wait this many
#   hours before doing an update of the cached package repo data.
#
#   Skipping unnecessary package repo updates can have a dramatic
#   positive impact on performance of this tool.
#
#   Defaults to '12' (number of hours)
#
#
#pkg_repo_update_window = 12
#
#
#-----------------------------------------------------------------------
#   Package Specification Style
#-----------------------------------------------------------------------
#
#       minimalist 
#           Only specify the packages you know you need.  Dependencies
#           will automatically be installed.  No packages will be
#           removed unless explicitly specified with a 'pkgname =
#           unwanted'.
#   
#       explicit
#           With 'explicit', you must provide a complete and exact list
#           of packages required.  Any existing packages that are not in
#           the list will be removed.  
#       
#           This option is NOT recommended.  It requires more effort to
#           maintain, especially when package names pulled in by the
#           package manager as dependencies change over time.
#
#       Default: minimalist
#
#pkg_specification_style = minimalist
#
#
#-----------------------------------------------------------------------
#   Remove the Running Kernel?
#-----------------------------------------------------------------------
#
#   If set to yes, go ahead and remove the running kernel if it's
#   package is identified for removal based on package definitions.
#   Removing the running kernel can be dangerous, so this setting
#   defaults to no.  This should not cause a problem, as the typical
#   reason for removing one kernel package is that a newer one (or two)
#   has been put in place.  So the next time you reboot, it should be
#   safely removed even if you leave this set to "no".
#
#       Default: no
#
#remove_running_kernel = no
#
#
########################################################################
#
#   END Package management related options
#
########################################################################


#
#   NOTE: You can specify global entries in multiple [global] sections.
#   There may be commented lines in between entries within a section,
#   but no blank lines.  A blank line indicates the end of the section.
#
[global]
########################################################################
#
#   BEGIN Simple State Manager repo related options
#
########################################################################
#   
#-----------------------------------------------------------------------
#   Base URL
#-----------------------------------------------------------------------
#
#   Base URL allows you to specify the location of your Simple State
#   Manager repository.  Your Simple State Manager repo is where Simple
#   State Manager will look for the canonical version of any files you
#   define.  It will also be pre-pended to the name of any bundle files
#   that you reference, unless they are specified with a fully qualified
#   file name.
#
#   Base URL doesn't usually need to be set, as it defaults to the
#   location where the config_file sits, and standard practice is to
#   keep definition files in your Simple State Manager repo.
#
#base_url   http://server/OU/FQDN
#base_url   https://server/OU/FQDN
#base_url   ftp://server/OU/FQDN
#base_url   file:///etc/ssm/FQDN
#
#   
#-----------------------------------------------------------------------
#   Upload URL
#-----------------------------------------------------------------------
#
#   upload_url is used by Simple State Manager when adding new files or
#   new versions of files to your repo.  You'll probably want to have
#   some kind of passwordless authentication mechanism in place when
#   using SSH based URLs.
#
#   Defaults to base_url if using a file:// style URL.
#
#upload_url = ssh://xcat-master/install/ssm_repo/
#upload_url = ssh://username@xcat-master/install/ssm_repo/
#upload_url = file://install/ssm_repo/
#
#   
#-----------------------------------------------------------------------
#   Email Log File after each Run
#-----------------------------------------------------------------------
#   
#   If email_log_to is set, then the log file will be emailed to the
#   listed address.
#
#email_log_to    john.doe@example.com
#
#
#-----------------------------------------------------------------------
#-----------------------------------------------------------------------
# Set permissions for resultant log file (/var/log/ssm).  May be useful
# for allowing non-root users to review the logs.  
#
# Defaults to 0640 (-rw-r-----).
#
#log_file_perms  0640
#
#
#-----------------------------------------------------------------------
#-----------------------------------------------------------------------
# If set to "yes", upgrade the simple-state-manager package before
# performing any other state management activity.  This option is mostly
# useful for developers wanting to make sure they're running the latest
# development package before each run.
#
# Defaults to "no"
#
#upgrade_ssm_before_sync = no
#
#
########################################################################
#
#   END Simple State Manager repo related options
#
########################################################################


########################################################################
#
#   BEGIN file related options
#
########################################################################
#
# [files]
#
#   Each file section allows you to define a desired state for the named
#   file, which includes a variety of critical characterstics that are
#   appropriate based on the type of file.
#
#   File 'type' can be one of:
#       regular
#       directory
#       softlink
#       hardlink
#       block
#       character
#       fifo
#       unwanted
#       ignore
#       generated
#       directory+contents-unwanted
#       chown+chmod
#
#   Optional parameters:
#       
#       depends = /file /directory pkgname1 pkgname2
#
#           * List of packages and/or files which must be installed prior to 
#             taking action on this configuration element.
#           * This is a white space seperated list.
#           * If a list item starts with a slash (/), then it is treated as a
#             file or directory.
#           * If a list item starts with anything other than a slash, it is
#             treated as a package name.
#
#       priority = 0
#           
#           * More than one entry for the same file can be specified.
#             The entry with the higher priority wins.  Allows a machine
#             specific config to override a common config, for example.
#           * Should be a positive or negative integer.
#           * If no priority specified, value defaults to 0.
#
#       prescript = /some/command
#
#           * The prescript is executed verbatim before taking other
#             action on the "name"ed file or directory.
#
#       postscript = /some/command
#
#           * The postscript is executed verbatim after taking other
#             action on the "name"ed file or directory.
#


#-----------------------------------------------------------------------
# "regular"
#-----------------------------------------------------------------------
#
#   A regular file.  A normal plain old file.  Not a symlink, directory,
#   fifo, etc.
#
#   Regular files have their md5sum, ownership, and permissions
#   verified.  
#   * If the md5sum doesn't match, the golden file from the $base_uri
#     is installed, and permissions are set.
#   * If the md5sum matches, but the permissions are wrong, then only
#     the permissions are fixed.
#   * Priority not specified, so zero (0) is implied.
#
[file]
name = /tmp/demo_regular-file
type = regular
md5sum = 27abe7c7e2423eddec0839a2d0600111   # <- Notice this ends in 111
owner = root
group = root
mode = 0644

#   Another regular file (same file as above, but perhaps in a bundle,
#   with higher priority).
#
#   * Highest priority wins.
#   * No numerical limit.
#   * Use an integer.
#   * If you don't use an integer, the string length of the value you
#     provide will be used as the integer value.  A value of 'one' would
#     result in an integer value of '3' (3 characters in the word 'one').
#
[file]
name = /tmp/demo_regular-file
type = regular
md5sum = 27abe7c7e2423eddec0839a2d0633e37   # <- Notice this ends in e37
owner = root
group = root
mode = 0644
priority = 95   # <- Notice this overrides the entry with the md5sum ending in 111


#-----------------------------------------------------------------------
# "directory"
#-----------------------------------------------------------------------
#
[file]
name = /tmp/demo_directory
type = directory
owner = root
group = root
mode = 0705


#-----------------------------------------------------------------------
# "directory+contents-unwanted"
#-----------------------------------------------------------------------
#
#   Same as a directory, but remove any contents that are not elsewhere
#   in the definition.
#
#   * Create directory and maintain permissions and ownership on the 
#     directory, just like a simple "type = directory".
#   * Plus, any contents of this directory that are not defined 
#     (elsewhere in the configuration) will be marked as unwanted.
#
#   TIP:  You can use the 'ignore' file type to exclude something from
#         the unwanted contents list.
#
[file]
name        = /tmp/demo_directory+contents-unwanted
type        = directory+contents-unwanted
owner       = root
group       = root
mode        = 0705


#-----------------------------------------------------------------------
# Softlink
#-----------------------------------------------------------------------
#
#   * If a softlink doesn't exist, it is created.
#   * If a softlink points to the wrong target, it is removed and
#     re-created.
#   * If the target doesn't exist, the softlink is still created.
#     A WARNING is indicated, but ERROR_LEVEL is _not_ increased.
#
[file]
name        = /tmp/demo_softlink-with-relative-path-to-target
type        = softlink
owner       = root
group       = root
target      = ../tmp/demo_directory

[file]
name        = /tmp/demo_softlink-with-absolute-path
type        = softlink
owner       = root
group       = root
target      = /tmp/demo_regular-file
prescript   = echo "         this is the prescript"
postscript  = echo "         this is the postscript"


#-----------------------------------------------------------------------
# Hardlink
#-----------------------------------------------------------------------
#
#   * If a hardlink doesn't exist, it is created. 
#       * But if the target does not exist, creation of the link is
#         auto-skipped, and $ERROR_LEVEL (which is used as the exit
#         status) is incremented.
#   * If a hardlink exists, the inode of the link and target are
#     compared: 
#       * If they match, nothing is done.
#       * If they don't match, the link is removed, and re-created.
#
[file]
name    = /tmp/demo_hardlink
type    = hardlink
target  = /tmp/demo_regular-file


#-----------------------------------------------------------------------
# Block, Character, and Fifo
#-----------------------------------------------------------------------
#
#   If a special file exists, and it's major and minor numbers don't
#   match the definition, it is removed and re-created.
#   * If the file type and the major and minor numbers match, but the
#     permissions are wrong, then only the permissions are fixed.
#
[file]
name        = /tmp/demo_character-file-like-dev-null
type        = character
major       = 1
minor       = 3
owner       = root
group       = root
mode        = 0666
postscript  = echo ; echo "         Try doing this: 'echo helo > /tmp/demo_character-file-like-dev-null'"

[file]
name        = /tmp/demo_block-file-like-dev-sda
type        = block
major       = 8
minor       = 0
owner       = root
group       = disk
mode        = 0660

[file]
name    = /tmp/demo_fifo-file
type    = fifo
owner   = root
group   = root
mode    = 0640
depends = /tmp/demo_regular-file


#-----------------------------------------------------------------------
# Unwanted file
#-----------------------------------------------------------------------
#
#   Unwanted files or directories simply removed.
#
[file]
name    = /tmp/demo_unwanted-file
type    = unwanted


#-----------------------------------------------------------------------
# Unwanted directory
#-----------------------------------------------------------------------
#
[file]
name    = /tmp/demo_unwanted-directory
type    = unwanted


#-----------------------------------------------------------------------
# Ignore file
#-----------------------------------------------------------------------
#
[file]
name    = /tmp/demo_ignore-this-file
type    = ignore


#-----------------------------------------------------------------------
# "generated"
#-----------------------------------------------------------------------
#
#   A file that is generated via a generator that is any series of
#   commands that can be run from the shell.  The resultant file is
#   literally what you get if you "scrape-n-paste" the commands
#   specified as the "generator".
#
#   A generator may extend across multiple lines.  Yes, you can even
#   paste in an entire shell script or a full perl or python program
#   (for example) as your generator.
#
#   A single line generator takes the form of:
#
#       generator = single line list of commands to run
#
#   A multi-line generator takes the form of a HERE_DOCUMENT.  
#
#       generator = <<EOF
#       some commands
#       more commands
#       more commands
#       etc.
#       EOF
#
#   The HERE_TERMINATOR can be anything you like, but any unquoted
#   leading or trailing spaces will be ignored.  Therefore, the
#   following are equivalent:
#   
#       generator = <<EOF
#       generator = << EOF
#       generator = << 'EOF'
#       generator = << "EOF"
#       generator = <<      "EOF"
#
#   * Warning:  generated files have the potential to be an expensive
#     operation, as the "generator" is run every single time the file 
#     is tested.
#
[file]
name        = /tmp/demo_generated-hostname
type        = generated
generator   = hostname -s
owner       = root
group       = root
mode        = 0775
depends     = /bin/hostname

#
# A single line generator
#
[file]
name       = /tmp/demo_generated-ifcfg-eth1
type       = generated
generator  = HOSTNAME=$(hostname -s); IP=$(getent hosts $HOSTNAME | grep -v 127 | awk '{print $1}' | sort | tail -n 1); echo DEVICE=eth2; echo NM_CONTROLLED=no; echo ONBOOT=yes; echo IPADDR=$IP; echo NETMASK=255.255.255.0; echo BOOTPROTO=static; echo PEERDNS=no
owner      = root
group      = root
mode       = 0644

#
# The same code as a multi-line generator.  If no shell is specified,
# the script will be run with root's standard shell.
#
[file]
name       = /tmp/demo_generated-ifcfg-eth2
type       = generated
generator  = <<EOF
HOSTNAME=$(hostname -s)
IP=$(getent hosts $HOSTNAME | grep -v 127 | awk '{print $1}' | sort | tail -n 1)
echo DEVICE=eth2
echo NM_CONTROLLED=no
echo ONBOOT=yes
echo IPADDR=$IP
echo NETMASK=255.255.255.0
echo BOOTPROTO=static
echo PEERDNS=no
EOF
owner      = root
group      = root
mode       = 0644

#
# Same as above, but specifying the shell you want to use.
#
[file]
name       = /tmp/demo_generated-ifcfg-eth3
type       = generated
generator  = <<EOF
#!/bin/bash
HOSTNAME=$(hostname -s)
IP=$(getent hosts $HOSTNAME | grep -v 127 | awk '{print $1}' | sort | tail -n 1)
echo DEVICE=eth2
echo NM_CONTROLLED=no
echo ONBOOT=yes
echo IPADDR=$IP
echo NETMASK=255.255.255.0
echo BOOTPROTO=static
echo PEERDNS=no
EOF
owner      = root
group      = root
mode       = 0644


#-----------------------------------------------------------------------
# "chown+chmod"
#-----------------------------------------------------------------------
#
#   Disregarding file type, simply maintains permissions and ownership.
#
#   * Maintaines ownership and permissions on a file or directory, but
#     disregards contents.
#   * Creates an empty file if file doesn't yet exist.
#
[file]
name = /tmp/demo_chown+chmod-file
type = chown+chmod
owner = root
group = root
mode = 0642

#
# A 4 part example using variables on a SLES12 system
#
#   Part 1
#
[variable]
name = BONDING_SLAVE0
generator = echo eth3

[variable]
name = BONDING_SLAVE1
generator = echo eth4

#
#   Part 2
#
[file]
name        = /tmp/etc/sysconfig/network/ifcfg-bond-10g
type        = generated
owner       = root
group       = root
mode        = 0644
generator = <<EOF
echo "
BONDING_MASTER='yes'
BONDING_MODULE_OPTS='mode=active-backup miimon=100'
BONDING_SLAVE0='${BONDING_SLAVE0}'
BONDING_SLAVE1='${BONDING_SLAVE1}'
BOOTPROTO='static'
IPADDR='192.168.22.51/24'
STARTMODE='auto'
"
EOF

#
#   Part 3
#
[file]
name        = /tmp/etc/sysconfig/network/ifcfg-${BONDING_SLAVE0}
type        = generated
owner       = root
group       = root
mode        = 0644
generator = <<EOF
echo BOOTPROTO='none'
echo STARTMODE='hotplug'
EOF

#
#   Part 4
#
[file]
name        = /tmp/etc/sysconfig/network/ifcfg-${BONDING_SLAVE1}
type        = generated
owner       = root
group       = root
mode        = 0644
generator = <<EOF
echo BOOTPROTO='none'
echo STARTMODE='hotplug'
EOF



########################################################################
#
#   END file related options
#
########################################################################


########################################################################
#
#   BEGIN service related options
#
########################################################################
#
# [service] sections
# 
# name:
#   * /etc/init.d/$name is assumed for the init script.
#
# details:
#   * Simply specify the runlevel a colon (:) and the prefix for each
#     service link to the master init script.
#   * Simple State Manager takes a look at your client system and gets a
#     list of all of it's rc directories (/etc/rc2.d, /etc/rcS.d, etc.).  
#     * If any rc directory contains a file with a name that matches 
#       (link or not -- some apps install copies instead of links), but
#       is not defined, it will be removed.
#     * Any defined links will be created.
#   * Order of entry of details does not matter.
#
# depends (optional):
#   * List of packages and/or files which must be installed prior to 
#     taking action on this configuration element.
#   * This is a white space seperated list.
#   * If a list item starts with a slash (/), then it is treated as a
#     file or directory.
#   * If a list item starts with anything other than a slash, it is
#     treated as a package name.
#
# Note: a "name that matches" means a filename that starts with either
#       an upper case S or K, followed by two digits, followed by the
#       name of the init script in question.
#
# This example will create the following links, and will remove all
# others from the /etc/rc?.d directories:
#
#   /etc/rc2.d/S99test-service
#   /etc/rc0.d/K01test-service
#   /etc/rcS.d/K01test-service
#   /etc/rc6.d/K01test-service
#
#[service]
#name = example-service
#details = 2:S99 0:K01 6:K01

#[service]
#name = slapd
#details = 2:S99 0:K01 S:K01 6:K01
#depends = slapd /etc/ldap/slapd.conf

########################################################################
#
#   END service related options
#
########################################################################


########################################################################
#
#   BEGIN bundle related options
#
########################################################################
#
# [bundles]
# 
#   The "bundles" sections (only one is really necessary) allow you to
#   include chunks of definition files, which are typically bundles of
#   related configuration elements.  
#
#   For example, you might have a bundle that includes all of the
#   packages and files necessary for your site's postfix mail client
#   configuration.
#
#   Details:
#
#       * Simply list the filename for each bundle in your bundles
#         section.
#       * Bundle file names may be relative to the "base_uri", or they
#         may be full URIs of type file://, ftp://, http://, or
#         https://.
#       * A bundle can included any non-global configuration elements.
#   
[bundles]
file:///dev/null
#bundles/postfix-client
#bundles/kerberos-client
#bundles/web-server

########################################################################
#
#   END bundle related options
#
########################################################################


########################################################################
#
#   BEGIN package related options 
#
#       (Look for package MANAGER related options in the [global]
#        section towards the top of this file)
#
########################################################################
#
# [packages] sections
#
# If no packages are specified, no package related actions will be taken.
#
# Details:
#   * Simply list the desired package names, one per line.  
#   * If you list any packages, list all packages for the system.
#   * You can have as many packages sections as you like.
#   * A package section is terminated with a blank line.
#   * A package may be listed more than once.
#
# Package options:
#   * Per-package options are optional, and are specified after the
#     package name following a space: pkgname option
#   * Multiple options are separated by commas: pkgname option1,option2
#   * Available options:
#       * unwanted 
#           Remove this package
#       * priority=INTEGER 
#           Change the priority of the action to be taken on this 
#           package
#   * Example: 
#       #
#       # In this example, we want to remove sudo and use sudo-ldap
#       # instead.  Note that the removal of the sudo package is
#       # completely independent from the adding of the sudo-ldap 
#       # package.  The priority of the sudo package is only competing
#       # against the priority of the sudo package specified elsewhere.
#       #
#       [packages]
#       sudo unwanted,priority=99
#       sudo-ldap
#
# Priority details:
#   * A priority of 0 is assumed if no priority is specified.
#   * If a priority is specified, highest priority wins.
#   * Priority must be an integer (positive or negative).
#   * A conflict occurs when a package is specified more than once at 
#     the same priority but with different options or settings.
#     Therefore, a conflict does _not_ occur if a package is specified
#     more than once, but at the same priority and with the same 
#     options.
#
# Additional yum specific details:
#   * Because of Red Hat's b0rken way of handling architecture, you can
#     have a packages with the same name, but a different arch,
#     installed at the same time.  Ie.: aspell.i386 and aspell.x86_64.
#     Therefore, you should include the arch in the package name in your
#     [packages] sections.
#
# Here is an example packages list from an Ubuntu system:
#
#[packages]
#abcde
#acl
#acpi-support
#acpid
#adduser
#akregator
#
#[packages]
#libevtlog0
#zsh
#syslog-ng
#klogd           unwanted,priority=
#klogd           unwanted,priority=2
#klogd           unwanted,priority=-3
#sysklogd        unwanted,priority=2
#ubuntu-minimal  unwanted,priority=3
#wink
#wink            unwanted
#libstdc++5
#
#########################################################################
#
#   END package related options 
#
#########################################################################

