#!/usr/bin/perl -w

#
# Copyright (C) 2006-2019 Brian Elliott Finley <brian@thefinleys.com>
#

use strict;
use Getopt::Long;
use File::Basename;

use lib "/usr/lib/simple-state-manager";
use SimpleStateManager;

our %o;
our %outstanding;
our %PKGS_FROM_STATE_DEFINITION;

our %PKGS_TARGET_STATE;
#
#   Examples:
#
#       $::PKGS_TARGET_STATE{$pkg} = 'install';
#       $::PKGS_TARGET_STATE{$pkg} = 'remove';
#       $::PKGS_TARGET_STATE{$pkg} = 'upgrade';
#
#   Intended to allow assessment of progress on target states
#   independent of the scope of an individual module or subroutine.
#
#   Use with code such as the following for a full assessment, such as
#   to declare the summary state at the end of a run:
#
#       #################################################################
#       #
#       # Do these once
#       #
#       use AptPkg::Config '$_config';
#       use AptPkg::System '$_system';
#       use AptPkg::Cache;
#       
#       $_config->init;
#       $_system            = $_config->system;
#       $_config->{quiet}   = 2;
#       
#       #################################################################
#       #
#       # Do these each time /* something may have changed */
#       #
#       # set up the cache
#       my $cache = AptPkg::Cache->new;
#       my $policy = $cache->policy;
#
#       my $pkg_ref = $cache->{$pkg};
#       if ($pkg_ref->{CurrentState} eq 'Installed') { action...; }
#       #
#       #################################################################
#

# Do this before GetOptions mucks up ARGV. -BEF-
store_invocation_command();

GetOptions( 
    "help"                              => \$o{help},
    "version"                           => \$o{version},
    "config|state-definition-file=s"    => \$o{config_file},
    "s|sy|sync|sync-state"              => \$o{sync_state},
    "summary"                           => \$o{summary},
    "yes"                               => \$o{yes},
    "n|no"                              => \$o{no},
    "debug"                             => \$o{debug},
    "op|only-packages"                  => \$o{only_packages},
    "of|only-files"                     => \$o{only_files},
    "otf|only-this-file=s@"             => \$o{only_this_file},
    "af|add-file|add-files=s@"          => \$o{add_file},
    "t|type=s"                          => \$o{type},
    "ap|add-package|add-packages=s@"    => \$o{add_package},
    "bf|bundlefile=s"                   => \$o{bundlefile},
    "mv|move-file|rename-file=s@"       => \$o{rename_file},
    "analyze-config"                    => \$o{analyze_config},
    "export-config=s"                   => \$o{export_config},
) or usage() and exit(1);

my $error_level = 0;
my $changes_made = -1;

validate_options();
main();

exit 0;


################################################################################
#
#   Subroutines
#
sub main {

    my $outstanding_change_count;
    our $PASS_NUMBER = 0;

    if($o{add_file}) {

        read_config_file();

        ($error_level, $changes_made) = add_new_files();

        if( $main::o{debug} ) { 
            ssm_print "ssm:main(), add_new_files results:\n";
            ssm_print "  \$changes_made:            $changes_made\n";
            ssm_print "  \$error_level:             $error_level\n";
            ssm_print "\n";
        }
        ssm_print "-------------------------------\n";
        if($error_level == 0) {
            ssm_print "Added $changes_made files.\n";
            ssm_print "Encountered $error_level errors.\n";
            ssm_print qq(\n);

        } else {
            ssm_print "Tried to add $changes_made files.\n";
            ssm_print "Encountered $error_level errors.\n";
            ssm_print qq(\n);

            email_log_file();

            exit $error_level;
        }
    }
    elsif($o{rename_file}) {

        read_config_file();

        ($error_level, $changes_made) = rename_file();

        if( $main::o{debug} ) { 
            ssm_print "ssm:main(), rename_file results:\n";
            ssm_print "  \$changes_made:            $changes_made\n";
            ssm_print "  \$error_level:             $error_level\n";
            ssm_print "\n";
        }
        ssm_print "-------------------------------\n";
        if($error_level == 0) {
            ssm_print "Renamed $changes_made files.\n";
            ssm_print "Encountered $error_level errors.\n";
            ssm_print qq(\n);

        } else {
            ssm_print "Tried to rename $changes_made files.\n";
            ssm_print "Encountered $error_level errors.\n";
            ssm_print qq(\n);

            email_log_file();

            exit $error_level;
        }
    }
    elsif($o{add_package}) {

        read_config_file();

        if($::o{pkg_manager} eq 'none') {

            ssm_print "\n";
            ssm_print "ERROR:  No package manager specified in the Configuration File.\n";
            ssm_print "        Please specify a package manager and try again.\n";
            ssm_print qq(\n);

            exit 1;
        }

        ($error_level, $changes_made) = add_new_packages();

        if( $main::o{debug} ) { 
            ssm_print "ssm:main(), add_new_packages results:\n";
            ssm_print "  \$changes_made:            $changes_made\n";
            ssm_print "  \$error_level:             $error_level\n";
            ssm_print "\n";
        }
        ssm_print "-------------------------------\n";
        if($error_level == 0) {
            ssm_print "Added packages.\n";
            ssm_print "Encountered $error_level errors.\n";
            ssm_print qq(\n);

        } else {
            ssm_print "Tried to add packages.\n";
            ssm_print "Encountered $error_level errors.\n";
            ssm_print qq(\n);

            email_log_file();

            exit $error_level;
        }
    } 
    elsif($o{export_config}) {

        read_config_file();

        ($error_level) = export_config();

        if( $main::o{debug} ) { 
            ssm_print "ssm:main(), export_config results:\n";
            ssm_print "  \$error_level:             $error_level\n";
            ssm_print "\n";
        }
        ssm_print "-------------------------------\n";
        if($error_level == 0) {
            ssm_print "Encountered $error_level errors.\n";
            ssm_print qq(\n);

        } else {
            ssm_print "Encountered $error_level errors.\n";
            ssm_print qq(\n);

            email_log_file();

            exit $error_level;
        }
    }


    if($o{sync_state}) {

        my $outstanding_changes = -1;
        my $prior_outstanding_changes = -1;

        # Iterate as long as changes are happening each go-round. -BEF-
        until( ($changes_made == 0) and ($outstanding_changes eq $prior_outstanding_changes) ) {

            $PASS_NUMBER++;

            read_config_file();
        
            #
            # Ok, let's go ahead and sync that state...
            #
            $prior_outstanding_changes = $outstanding_changes;

            ($error_level, $changes_made) = sync_state();

            $outstanding_changes = 0;
            $outstanding_change_count = 0;

            foreach (keys %outstanding) {
                $outstanding_changes .= "  $outstanding{$_}  $_\n";
                $outstanding_change_count++ if($outstanding{$_} eq 'b0rken');
            }
        
            if( $main::o{debug} ) { 
                ssm_print "ssm:sync_state results:\n";
                ssm_print "  \$changes_made:                $changes_made\n";
                ssm_print "  \$error_level:                 $error_level\n";
                ssm_print "  \$outstanding_changes:         $outstanding_change_count\n";
                ssm_print "  -------------------------------------------\n";
                ssm_print "$outstanding_changes";
                ssm_print "  -------------------------------------------\n";
                ssm_print "\n";
                sleep 3;
            }

            # First pass gathers info and status of deps
            # Second pass shows output
            last if( $o{no} and $PASS_NUMBER == 2 );

            # The looping can go by so fast it's confusing if running
            # interactively.
            sleep 1 unless( $o{yes} or $o{no});;
        }
    }

    email_log_file();

    return 1;
}


sub validate_options {

    # Can't use ssm_print in here -- not initialized yet. -BEF-

    if($o{'help'})    { usage()   and exit(0); }
    if($o{'version'}) { version() and exit(0); }

    unless( user_is_root() ) {
        usage();
        print "\n";
        print "Must run as root!\n";
        print "\n";
        exit 1;
    }

    if($o{type} and ! $o{add_file}) { 
        usage();
        print "\n";
        print "The --type option only has effect when used with --add-file\n";
        print "\n";
    }

    # If type is defined, verify it.  If it's not, that's OK. -BEF-
    if($o{type}) {

        if($o{type} eq 'directory+contents-unwanted') {
            $o{type} = 'directory+contents_unwanted';
        }

        if($o{type} ne 'directory+contents_unwanted' and
           $o{type} ne 'unwanted' and
           $o{type} ne 'ignored') {

                usage();
                print "\n";
                print "Suggestion -- Please specify one of the following options for --type:\n";
                print "\n";
                print "  directory+contents-unwanted\n";
                print "  unwanted\n";
                print "  ignored\n";
                print "\n";
                exit(1);
        }
    }


    # only_files
    if($o{only_files} and $o{only_packages}) { 
        usage();
        print "\n";
        print "The --only-files and --only-packages options conflict.  Use one or the other.\n";
        print "\n";
        exit(1);
    }

    # only_this_file conflicts
    if( $o{only_this_file} and $o{only_packages}) { 
        usage();
        print "\n";
        print "The --only-this-file and --only-packages options conflict.  Use one or the other.\n";
        print "\n";
        exit(1);
    }

    # add_file conflicts
    if( $o{add_file} and $o{only_packages}) { 
        usage();
        print "\n";
        print "The --add-file and --only-packages options conflict.  Use one or the other.\n";
        print "\n";
        exit(1);
    }

    if( $o{rename_file} ) {
        if(
                $o{add_package} 
                or $o{sync_state}
                or $o{summary} 
                or $o{only_packages} 
                or $o{only_files} 
                or $o{only_this_file} 
                or $o{add_file}
                or $o{add_package}
                #or $o{rename_file}
                or $o{analyze_config}
                or $o{export_config}
            ) { 
            usage();
            print "\n";
            print "The --rename-file option conflicts with one or more of the other options used.\n";
            print "\n";
            exit(1);
        }
        elsif( ! $ARGV[0] ) {
            usage();
            print "\n";
            print "Make sure that both FILE and NEWFILE are specified...\n";
            print "\n";
            print "  Try --rename-file FILE NEWFILE\n";
            print "\n";
            exit(1);
        }
        elsif( $ARGV[1] ) {
            usage();
            print "\n";
            print "More than two file names were specified...\n";
            print "\n";
            print "  Try --rename-file FILE NEWFILE\n";
            print "\n";
            exit(1);
        }
    }

    if( $o{add_package} and $o{only_files}) { 
        usage();
        print "\n";
        print "The --add-package option conflicts with one or more of the other options used.\n";
        print "\n";
        exit(1);
    }

    if($o{yes} and $o{no}) { 
        usage();
        print "\n";
        print "The --yes and --no options conflict.  Use one or the other.\n";
        print "\n";
        exit(1);
    }

    if($o{yes} and $o{analyze_config}) { 
        usage();
        print "\n";
        print "The --yes and --analyze-config (implies --no) options conflict.  Use one or the other.\n";
        print "\n";
        exit(1);
    }

    if($o{yes} and $o{summary}) { 
        usage();
        print "\n";
        print "The --yes and --summary (implies --no) options conflict.  Use one or the other.\n";
        print "\n";
        exit(1);
    }

    if($o{summary}) { 
        $o{sync_state} = 1; 
        $o{no} = 1; 
    }

    if($o{only_this_file}) { 
        $o{sync_state} = 1; 
    }

    if($o{only_files}) { 
        $o{sync_state} = 1; 
    }

    if($o{only_packages}) { 
        $o{sync_state} = 1; 
    }

    if($o{analyze_config}) { 
        $o{sync_state} = 1; 
        $o{no} = 1; 
    }

    unless(
        $o{sync_state} 
        or $o{analyze_config} 
        or $o{add_file} 
        or $o{add_package} 
        or $o{summary}
        or $o{rename_file}
        or $o{export_config}
        ) { 
        usage();
        print "\n";
        print "Try one of the following:\n";
        print "\n";
        print "  --sync\n";
        print "  --summary\n";
        print "  --only-this-file FILE\n";
        print "  --only-files\n";
        print "  --only-packages\n";
        print "  --add-file\n";
        print "  --add-package\n";
        print "  --analyze-config\n";
        print "  --rename-file FILE NEWFILE\n";
        print "  --export-config EXPORT_DIR\n";
        print "\n";
        exit(1);
    }

    if($o{sync_state} and $o{analyze_config}) { 
        print "\n";
        print "INFO:    The --analyze-config option implies --sync.  In this case,\n";
        print "         the --sync option is unnecessary.  Proceeding anyway...\n";
        print "\n";
        sleep 1;
    }

    if( $o{export_config} ) {
        if(
                $o{add_package}
                or $o{sync_state}
                or $o{summary} 
                #or $o{only_packages} 
                #or $o{only_files} 
                #or $o{only_this_file} 
                or $o{add_file}
                or $o{add_package}
                or $o{rename_file}
                or $o{analyze_config}
                #or $o{export_config}
            ) { 
            usage();
            print "\n";
            print "The --export-config option conflicts with one or more of the other options used.\n";
            print "\n";
            exit(1);
        }
    }

    return 1;
}


sub usage {
    my $progname = basename($0);
    version();
    print <<EOF;
SYNOPSIS
    $progname [OPTIONS...]

DESCRIPTION
    $progname 

OPTIONS

    Options can be presented in any order and may be abbreviated to
    shortest uniqueness.
    
    --help             

        Display this output.
    
    --version          

        Display version and copyright information.
    
    --s, --sync

        Bring this machine's state in sync with it's state definition
        file.
    
    --op, --only-packages

        Only sync packages.  Don't sync files.
    
    --of, --only-files

        Only sync files.  Don't sync packages.
    
    --otf, --only-this-file FILE [--only-this-file FILE...]

        Only sync this particular file.  Don't sync packages.  May be used
        multiple times to specify multiple files.

        Example:  --otf /etc/file1.txt --otf /etc/file2.txt
    
    --af, --add-file FILE [FILE...]

        Where FILE type may be any of the following: regular, directory,
        softlink, block, character, or fifo.  A hardlink is treated as a
        regular file when adding via this method.

        Adds FILE to the main configuration file, or to --bundlefile if
        specified.  

        Fully qualified paths are automatically determined, if not specified
        explicitly.

        Example:  --add-file file1 "/etc/other directory/" ../file3

    --t, --type TYPE

        Where TYPE is one of:

            directory+contents-unwanted
            ignored
            unwanted

        This argument modifies the behavior of --add-file, by explicitly
        setting the file type.

    --ap, --add-package PACKAGE [PACKAGE...]

        Adds each PACKAGE to the main configuration file, or to --bundlefile if
        specified.

        You may combine this option with --sync (or --sync --only-packages) to
        install the package you've just added to the configuration.

        Examples:  --add-package pkgname1 "pkgname2 priority=99" pkgname3
                   -s -ap pkg1 pkg2

    --bf, --bundlefile BUNDLEFILE

        Works with the --add-file option.  Specifies the BUNDLEFILE in the repo
        to which all files specified by --add-file should be added.  While
        --add-file may be specified multiple times, only one --bundlefile may be
        specified.

        Defaults to the main config file.

    --export-config EXPORT_DIR

        Creates a copy of the configuration in EXPORT_DIR that matches the
        current configuration state.  
        
        DEFAULTS:  As the primary goal of this option is for sharing of config
        data, it is designed to be "safe" by default, by ONLY including the
        current state of the configuration.  Historical elements, such as
        earlier versions of files, time stamps, etc. are stripped out, leaving
        a pristine sharable config.  
        
        XXX For elements with multiple instances and prioritization, only the
        element with winning priority is included. XXX

    --config URL

        Where URL is the location of the configuration file (state definition
        file) you want to use with this client.  The URL can be in one of the
        following forms, and the configuration files can be named anything you
        like:
    
         https://server.example.com/ssm_repo/computenodes.conf
          http://server.example.com/ssm_repo/myhost.example.com
           ftp://server.example.com/ssm_repo/fabrication-floor-appliance
          file:///etc/ssm/localhost
    
        Defaults to the URL specified in /etc/ssm/defaults.
    
    --yes

        Answer "yes" to all questions.
    
        Note: Does not install packages that are undefined, even if the package
        manager wants to install them.  Must go interactive (omit --yes) to be
        prompted for installation of undefined packages.
    
    --no

        Answer "no" to all questions.  Don't make any changes to the system.
        (Well, if a newer version is available, it will still upgrade the 'ssm'
        package itself.)
    
    --summary

        Implies "--no" and "--sync".  Does not include diff output on files that
        are out of sync.  Only shows a one line summary for each configuration
        element.

    --rename-file FILE NEWFILE

        Rename FILE to NEWFILE in the repository, and mark FILE as unwanted.

    --mv, --move-file

        Same as --rename-file.

    --debug

        Show each command as it is being run.
    
    --analyze-config

        Output details about where config elements are defined, and what their
        priorities are.  Implies the options --sync and --no.
    
    
SEE ALSO

    For details on the /etc/ssm/defaults file, which points a client at it's
    state definition config file, just open it up and edit it.  It includes
    instructions right there in it's comments:

        /etc/ssm/defaults

    For details on state definition config files, where all the really fun stuff
    happens, please see:

        /usr/share/doc/simple-state-manager/examples/safe_to_run_example_config_file.conf
    
    Also take a look at:

        https://github.com/finley/SSM/blob/master/README.md


BUGS

    Report bugs and suggestions at: https://github.com/finley/SSM/issues

    Or send email to: 
      Brian Finley <brian\@thefinleys.com> or Brian Finley <bfinley\@lenovo.com>

EOF

    return 1;
}

sub store_invocation_command {

    my $cmd = "$0";
    foreach(@ARGV) {
        $cmd .= " $_";
    }

    $o{invocation_command} = $cmd;

    return 1;
}

#  vi:set filetype=perl tw=0:
